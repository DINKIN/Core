/****************************************************************************
 *
 * 		renderpasses.h: Render Passes operations
 *      This is part of the yafray package
 *      Copyright (C) 2015  David Bluecame
 *
 *      This library is free software; you can redistribute it and/or
 *      modify it under the terms of the GNU Lesser General Public
 *      License as published by the Free Software Foundation; either
 *      version 2.1 of the License, or (at your option) any later version.
 *
 *      This library is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *      Lesser General Public License for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public
 *      License along with this library; if not, write to the Free Software
 *      Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

#ifndef Y_RENDERPASSES_H
#define Y_RENDERPASSES_H

#include <yafray_config.h>

#include <iostream>
#include <vector>
#include <string>
#include <map>

__BEGIN_YAFRAY

class color_t;
class colorA_t;

enum externalPassTypes_t
{
	PASS_EXT_DISABLED				=	-1,
	PASS_EXT_COMBINED				=	0,
	PASS_EXT_Z_DEPTH,
	PASS_EXT_VECTOR,
	PASS_EXT_NORMAL,
	PASS_EXT_UV,
	PASS_EXT_COLOR,
	PASS_EXT_EMIT,
	PASS_EXT_MIST,
	PASS_EXT_DIFFUSE,
	PASS_EXT_SPECULAR,
	PASS_EXT_AO,
	PASS_EXT_ENV,
	PASS_EXT_INDIRECT,
	PASS_EXT_SHADOW,
	PASS_EXT_REFLECT,
	PASS_EXT_REFRACT,
	PASS_EXT_OBJ_INDEX,
	PASS_EXT_MAT_INDEX,
	PASS_EXT_DIFFUSE_DIRECT,
	PASS_EXT_DIFFUSE_INDIRECT,
	PASS_EXT_DIFFUSE_COLOR,
	PASS_EXT_GLOSSY_DIRECT,
	PASS_EXT_GLOSSY_INDIRECT,
	PASS_EXT_GLOSSY_COLOR,
	PASS_EXT_TRANS_DIRECT,
	PASS_EXT_TRANS_INDIRECT,
	PASS_EXT_TRANS_COLOR,
	PASS_EXT_SUBSURFACE_DIRECT,
	PASS_EXT_SUBSURFACE_INDIRECT,
	PASS_EXT_SUBSURFACE_COLOR,
	PASS_EXT_SURFACE_INTEGRATION,
	PASS_EXT_VOLUME_INTEGRATION,
	PASS_EXT_VOLUME_TRANSMITTANCE,
	PASS_EXT_TOTAL_PASSES			//IMPORTANT: KEEP THIS ALWAYS IN THE LAST POSITION
};

enum externalPassTileTypes_t
{
	PASS_EXT_TILE_1_GRAYSCALE		=	 1,
	PASS_EXT_TILE_3_RGB				=	 3,
	PASS_EXT_TILE_4_RGBA			=	 4
};

enum internalYafPassTypes_t
{
	PASS_YAF_DISABLED				=	-1,
	PASS_YAF_COMBINED				=	0,
	PASS_YAF_Z_DEPTH_NORM,
	PASS_YAF_Z_DEPTH_ABS,
	PASS_YAF_NORMAL_SMOOTH,
	PASS_YAF_NORMAL_GEOM,
	PASS_YAF_UV,
	PASS_YAF_RADIANCE,
	PASS_YAF_EMIT,
	PASS_YAF_DIFFUSE,
	PASS_YAF_DIFFUSE_NO_SHADOW,
	PASS_YAF_AO,
	PASS_YAF_AO_CLAY,
	PASS_YAF_ENV,
	PASS_YAF_MIST,
	PASS_YAF_INDIRECT,
	PASS_YAF_INDIRECT_ALL,
	PASS_YAF_SHADOW,
	PASS_YAF_REFLECT_PERFECT,
	PASS_YAF_REFRACT_PERFECT,
	PASS_YAF_REFLECT_ALL,
	PASS_YAF_REFRACT_ALL,
	PASS_YAF_OBJ_INDEX_ABS,
	PASS_YAF_OBJ_INDEX_NORM,
	PASS_YAF_OBJ_INDEX_AUTO,
	PASS_YAF_MAT_INDEX_ABS,
	PASS_YAF_MAT_INDEX_NORM,
	PASS_YAF_MAT_INDEX_AUTO,
	PASS_YAF_OBJ_INDEX_MASK,
	PASS_YAF_OBJ_INDEX_MASK_SHADOW,
	PASS_YAF_OBJ_INDEX_MASK_ALL,
	PASS_YAF_MAT_INDEX_MASK,
	PASS_YAF_MAT_INDEX_MASK_SHADOW,
	PASS_YAF_MAT_INDEX_MASK_ALL,
	PASS_YAF_DIFFUSE_INDIRECT,
	PASS_YAF_DIFFUSE_COLOR,
	PASS_YAF_GLOSSY,
	PASS_YAF_GLOSSY_INDIRECT,
	PASS_YAF_GLOSSY_COLOR,
	PASS_YAF_TRANS,
	PASS_YAF_TRANS_INDIRECT,
	PASS_YAF_TRANS_COLOR,
	PASS_YAF_SUBSURFACE,
	PASS_YAF_SUBSURFACE_INDIRECT,
	PASS_YAF_SUBSURFACE_COLOR,
	PASS_YAF_SURFACE_INTEGRATION,
	PASS_YAF_VOLUME_INTEGRATION,
	PASS_YAF_VOLUME_TRANSMITTANCE,
	PASS_YAF_DEBUG_NU,
	PASS_YAF_DEBUG_NV,
	PASS_YAF_DEBUG_DPDU,
	PASS_YAF_DEBUG_DPDV,
	PASS_YAF_DEBUG_DSDU,
	PASS_YAF_DEBUG_DSDV,
	PASS_YAF_AA_SAMPLES,
	PASS_YAF_TOTAL_PASSES			//IMPORTANT: KEEP THIS ALWAYS IN THE LAST POSITION
};


class YAFRAYCORE_EXPORT extPass_t  //Render pass to be exported, for example, to Blender, and mapping to the internal YafaRay render passes generated in different points of the rendering process
{
	public:
		extPass_t(int extPassType, int intPassType);
		bool enabled;		
		int externalPassType;
		int externalTyleType;
		int internalYafPassType;
};

class YAFRAYCORE_EXPORT renderPasses_t
{
	public:
		renderPasses_t();
		void generate_pass_maps();	//Generate text strings <-> pass type maps
		void pass_add(const std::string& sExternalPass, const std::string& sInternalPass);	//Adds a new External Pass associated to an internal pass. Strings are used as parameters and they must match the strings in the maps generated by generate_pass_maps()
        size_t numExtPasses() const;
        int externalPassType(size_t pass_seq) const;
		std::string externalPassTypeString(size_t pass_seq) const;
        int externalTyleType(size_t pass_seq) const;
        int internalYafPassType(externalPassTypes_t pass) const;
        int internalYafPassType(int pass) const;
        
		std::map<int, std::string> extPassMapIntString; //Map int-string for external passes
		std::map<std::string, int> extPassMapStringInt; //Reverse map string-int for external passes
		std::map<int, std::string> intPassMapIntString; //Map int-string for internal passes
		std::map<std::string, int> intPassMapStringInt; //Reverse map string-int for internal passes
        
    protected:
		std::vector<extPass_t> extPasses;		//List of the external Render passes to be exported
};

class YAFRAYCORE_EXPORT colorIntPasses_t  //Internal YafaRay color passes generated in different points of the rendering process
{
	public:
		colorIntPasses_t(renderPasses_t &renderPasses);
		bool enabled(int pass) const;
		void enable_pass(int pass);
		colorA_t& color(int pass);
		colorA_t& operator()(int pass);
		void reset_colors();
		colorA_t init_color(int pass);
		void multiply_colors(float factor);
		colorA_t probe_set(const int& pass, const colorA_t& renderedColor, const bool& condition = true);
		colorA_t probe_set(const int& pass, const colorIntPasses_t& colorPasses, const bool& condition = true);
		colorA_t probe_add(const int& pass, const colorA_t& renderedColor, const bool& condition = true);
		colorA_t probe_add(const int& pass, const colorIntPasses_t& colorPasses, const bool& condition = true);
		colorA_t probe_mult(const int& pass, const colorA_t& renderedColor, const bool& condition = true);
		colorA_t probe_mult(const int& pass, const colorIntPasses_t& colorPasses, const bool& condition = true);
		int get_highest_internal_pass_used() const;
		
		colorIntPasses_t & operator *=(CFLOAT f);
		colorIntPasses_t & operator *=(color_t &a);
		colorIntPasses_t & operator *=(colorA_t &a);
		colorIntPasses_t & operator +=(colorIntPasses_t &a);

		float pass_mask_obj_index;	//Object Index used for masking in/out in the Mask Render Passes
		float pass_mask_mat_index;	//Material Index used for masking in/out in the Mask Render Passes
		bool pass_mask_invert;	//False=mask in, True=mask out
		bool pass_mask_only;	//False=rendered image is masked, True=only the mask is shown without rendered image
    
    protected:
		int highestInternalPassUsed;
		std::vector <bool> enabledIntPasses;
		std::vector <colorA_t> intPasses;
		renderPasses_t &passDefinitions;
};


__END_YAFRAY

#endif // Y_RENDERPASSES_H
